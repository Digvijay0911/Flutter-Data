import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:todo_crud_api_app/addTodoPage.dart';

class Todo_List extends StatefulWidget {
  const Todo_List({super.key});

  @override
  State<Todo_List> createState() => _Todo_ListState();
}

class _Todo_ListState extends State<Todo_List> {
  // ---------------------------------------------------------------------
  bool isLoading = true;
  List items = [];

  // GET API

  Future<void> fetchTodo() async {
    final response = await http
        .get(Uri.parse("https://api.nstack.in/v1/todos?page=1&limit=15"));

    if (response.statusCode == 200) {
      Map todoData = jsonDecode(response.body);
      List result = todoData['items'];

      setState(() {
        items = result;
      });
    }
    setState(() {
      isLoading = false;
    });
  }

  @override
  void initState() {
    super.initState();
    fetchTodo();
  }

  // DELETE API

  Future<void> deleteById(String id) async {
    // Delete the item
    var response =
        await http.delete(Uri.parse("https://api.nstack.in/v1/todos/${id}"));
  }

  // Show Error Message

  void showErrorMessage(String msg) {
    final snackBar = SnackBar(
      content: Text(
        msg,
        style: TextStyle(color: Colors.white),
      ),
      backgroundColor: Colors.red,
    );
    ScaffoldMessenger.of(context).showSnackBar(snackBar);
  }

  // ====================================================================
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.blueAccent,
        centerTitle: true,
        title: Text(
          "Todo List",
          style: TextStyle(
              color: Colors.white, fontWeight: FontWeight.bold, fontSize: 23),
        ),
      ),
      body: Visibility(
        visible: isLoading,
        child: Center(
          child: CircularProgressIndicator(),
        ),
        replacement: RefreshIndicator(
          onRefresh: fetchTodo,
          child: Visibility(
            visible: items.isNotEmpty,
            replacement: Center(
              child: Text(
                "No Todo Item",
                style: TextStyle(color: Colors.white, fontSize: 25),
              ),
            ),
            child: ListView.builder(
                itemCount: items.length,
                itemBuilder: (context, index) {
                  Map item = items[index];
                  final String id = item["_id"]; // for deleteById function
                  return Card(
                    child: ListTile(
                      leading: CircleAvatar(
                        backgroundColor: Colors.black,
                        child: Text(
                          "${index + 1}",
                          style: TextStyle(color: Colors.white),
                        ),
                      ),
                      title: Text(
                        item['title'],
                      ),
                      subtitle: Text(
                        item['description'],
                        style: TextStyle(color: Colors.white),
                      ),
                      trailing: PopupMenuButton(
                        onSelected: (value) {
                          if (value == "edit") {
                            // Open edit page
                            navigateToEditPage(item);
                          } else if (value == "delete") {
                            // Delete and remove the item
                            deleteById(id).then((value) async {
                              await fetchTodo();
                            });
                          }
                        },
                        icon: Icon(Icons.more_vert, color: Colors.white),
                        color: Colors.white,
                        itemBuilder: (context) {
                          return [
                            PopupMenuItem(
                              child: Text(
                                "Edit",
                                style: TextStyle(color: Colors.black),
                              ),
                              value: "edit",
                            ),
                            PopupMenuItem(
                              child: Text(
                                "Delete",
                                style: TextStyle(color: Colors.black),
                              ),
                              value: "delete",
                            ),
                          ];
                        },
                      ),
                    ),
                  );
                }),
          ),
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          navigateToAddPage();
        },
        child: Icon(
          Icons.add,
          color: Colors.white,
        ),
        backgroundColor: Colors.blue,
      ),
    );
  }

//====================================================================================
  Future<void> navigateToAddPage() async {
    final route = MaterialPageRoute(builder: (context) => AddTodoPage());
    await Navigator.push(context, route);

    setState(() {
      isLoading = true;
    });
    fetchTodo();
  }

  Future<void> navigateToEditPage(Map item) async {
    final route =
        MaterialPageRoute(builder: (context) => AddTodoPage(todo: item));
    await Navigator.push(context, route);

    setState(() {
      isLoading = true;
    });
    fetchTodo();
  }
}
