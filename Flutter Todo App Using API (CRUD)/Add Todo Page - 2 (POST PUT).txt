import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

class AddTodoPage extends StatefulWidget {
  //EditPage Logic
  final Map? todo;
  const AddTodoPage({super.key, this.todo});

  @override
  State<AddTodoPage> createState() => _AddTodoPageState();
}

class _AddTodoPageState extends State<AddTodoPage> {
  // -------------------------------------------------------------------------

  TextEditingController titleController = TextEditingController();
  TextEditingController descriptionController = TextEditingController();

  dynamic red = Colors.red;
  dynamic blue = Colors.blue;

  bool isEdit = false;
  initState() {
    final todo = widget.todo;
    super.initState();
    if (todo != null) {
      isEdit = true;
      final title = todo["title"];
      final description = todo["description"];

      titleController.text = title;
      descriptionController.text = description;
    }
  }

  //POST API

  Future<void> submitData() async {
    // Get the data to server
    final title = titleController.text;
    final description = descriptionController.text;
    final Databody = {
      "title": title,
      "description": description,
      "is_completed": false
    };

    // Submit data to the server
    final responce = await http.post(
        Uri.parse("https://api.nstack.in/v1/todos"),
        body: jsonEncode(Databody),
        headers: {'Content-Type': 'application/json'});
    // Show success or fail message based on status
    if (responce.statusCode == 201) {
      titleController.text = "";
      descriptionController.text = "";
      showSuccessMessage("Creation Success", blue);
    } else {
      print(responce.statusCode);
      showSuccessMessage("Creation Failed", red);
    }
  }

  void showSuccessMessage(String msg, var backcolor) {
    final snackBar = SnackBar(
      content: Text(
        msg,
        style: TextStyle(color: Colors.white),
      ),
      backgroundColor: backcolor,
    );
    ScaffoldMessenger.of(context).showSnackBar(snackBar);
  }

  // PUT API

  Future<void> updateData() async {
// Add data to the server
    final todo = widget.todo;

    if (todo == null) {
      print("You cannot call updated without todo data");
      return;
    }

    final id = todo["_id"];

    final title = titleController.text;
    final description = descriptionController.text;
    final Databody = {
      "title": title,
      "description": description,
      "is_completed": false,
    };

// Submit updated data to the server
    final responce = await http.put(
        Uri.parse("https://api.nstack.in/v1/todos/${id}"),
        body: jsonEncode(Databody),
        headers: {'Content-Type': 'application/json'});

    // Show success or fail message based on status
    if (responce.statusCode == 200) {
      showSuccessMessage("Updation Success", blue);
    } else {
      print(responce.statusCode);
      showSuccessMessage("Updation Failed", red);
    }
  }

  // =========================================================================
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.blueAccent,
        centerTitle: true,
        title: Text(
          isEdit ? "Edit Todo" : "Add Todo",
          style: TextStyle(
              color: Colors.white, fontWeight: FontWeight.bold, fontSize: 23),
        ),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: ListView(
          children: [
            TextField(
              style: TextStyle(color: Colors.white),
              controller: titleController,
              decoration: InputDecoration(
                  hintText: "Title", hintStyle: TextStyle(color: Colors.grey)),
            ),
            TextField(
              style: TextStyle(color: Colors.white),
              controller: descriptionController,
              decoration: InputDecoration(
                  hintText: "Description",
                  hintStyle: TextStyle(color: Colors.grey)),
              keyboardType: TextInputType.multiline,
              maxLines: 8,
              minLines: 5,
            ),
            SizedBox(
              height: 15,
            ),
            ElevatedButton(
              style: ElevatedButton.styleFrom(backgroundColor: Colors.blue),
              onPressed: () {
                isEdit ? updateData() : submitData();
              },
              child: Padding(
                padding: const EdgeInsets.all(15.0),
                child: Text(
                  isEdit ? "Update" : "Submit",
                  style: TextStyle(color: Colors.white, fontSize: 20),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
